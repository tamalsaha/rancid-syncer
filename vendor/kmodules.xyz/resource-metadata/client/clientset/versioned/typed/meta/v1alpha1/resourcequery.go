/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	rest "k8s.io/client-go/rest"
	v1alpha1 "kmodules.xyz/resource-metadata/apis/meta/v1alpha1"
	scheme "kmodules.xyz/resource-metadata/client/clientset/versioned/scheme"
)

// ResourceQueriesGetter has a method to return a ResourceQueryInterface.
// A group's client should implement this interface.
type ResourceQueriesGetter interface {
	ResourceQueries() ResourceQueryInterface
}

// ResourceQueryInterface has methods to work with ResourceQuery resources.
type ResourceQueryInterface interface {
	Create(ctx context.Context, resourceQuery *v1alpha1.ResourceQuery, opts v1.CreateOptions) (*v1alpha1.ResourceQuery, error)
	ResourceQueryExpansion
}

// resourceQueries implements ResourceQueryInterface
type resourceQueries struct {
	client rest.Interface
}

// newResourceQueries returns a ResourceQueries
func newResourceQueries(c *MetaV1alpha1Client) *resourceQueries {
	return &resourceQueries{
		client: c.RESTClient(),
	}
}

// Create takes the representation of a resourceQuery and creates it.  Returns the server's representation of the resourceQuery, and an error, if there is any.
func (c *resourceQueries) Create(ctx context.Context, resourceQuery *v1alpha1.ResourceQuery, opts v1.CreateOptions) (result *v1alpha1.ResourceQuery, err error) {
	result = &v1alpha1.ResourceQuery{}
	err = c.client.Post().
		Resource("resourcequeries").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(resourceQuery).
		Do(ctx).
		Into(result)
	return
}
